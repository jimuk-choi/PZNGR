import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { createJSONStorage } from './utils/localStorage';
import { updateSessionData, getSessionData } from '../utils/sessionManager';

// Ï¥àÍ∏∞ ÏÉÅÌÉú
const initialState = {
  items: [], // Ï∞úÌïú ÏÉÅÌíà Î™©Î°ù
  totalCount: 0, // Ï∞úÌïú ÏÉÅÌíà Ï¥ù Í∞úÏàò
  sessionId: null, // ÌòÑÏû¨ ÏÑ∏ÏÖò ID (Í≤åÏä§Ìä∏/ÏÇ¨Ïö©Ïûê)
  sessionType: 'none', // 'guest', 'user', 'none'
};

// Ï∞úÌïòÍ∏∞ ÏÉÅÌÉú Í¥ÄÎ¶¨ store
export const useWishlistStore = create(
  persist(
    (set, get) => ({
      // ÏÉÅÌÉú
      ...initialState,

      // ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî (Í≤åÏä§Ìä∏/ÏÇ¨Ïö©Ïûê)
      initializeWishlistSession: (sessionId, sessionType) => {
        console.log(`‚ù§Ô∏è Initializing wishlist for ${sessionType} session:`, sessionId);
        
        set({ 
          sessionId, 
          sessionType 
        });
        
        // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏù∏ Í≤ΩÏö∞ ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Ï∞úÌïòÍ∏∞ Î°úÎìú
        if (sessionType === 'guest') {
          get().loadGuestWishlist();
        }
      },

      // Í≤åÏä§Ìä∏ Ï∞úÌïòÍ∏∞ Î°úÎìú
      loadGuestWishlist: () => {
        const guestWishlistData = getSessionData('wishlist');
        if (guestWishlistData && Array.isArray(guestWishlistData)) {
          console.log('üíù Loading guest wishlist from session:', guestWishlistData.length, 'items');
          set({ 
            items: guestWishlistData,
            totalCount: guestWishlistData.length
          });
        }
      },

      // Í≤åÏä§Ìä∏ Ï∞úÌïòÍ∏∞ Ï†ÄÏû•
      saveGuestWishlist: () => {
        const { items, sessionType } = get();
        if (sessionType === 'guest') {
          updateSessionData('wishlist', items);
        }
      },

      // ÏÇ¨Ïö©Ïûê Ï∞úÌïòÍ∏∞Î°ú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
      migrateGuestWishlistToUser: (userId) => {
        const { items, sessionType } = get();
        
        if (sessionType === 'guest' && items.length > 0) {
          console.log(`üîÑ Migrating ${items.length} items from guest wishlist to user:`, userId);
          
          // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖòÏúºÎ°ú Ï†ÑÌôò
          set({
            sessionId: userId,
            sessionType: 'user'
          });
          
          return {
            success: true,
            migratedItemCount: items.length,
            items: items
          };
        }
        
        return {
          success: false,
          migratedItemCount: 0,
          items: []
        };
      },

      // Ï∞úÌïòÍ∏∞ Ï∂îÍ∞Ä
      addToWishlist: (product) => {
        const { items } = get();
        
        // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        const existingItem = items.find(item => item.productId === product.id);
        if (existingItem) {
          console.log('‚ö†Ô∏è Product already in wishlist:', product.name);
          return false;
        }
        
        // ÏÉà Ï∞úÌïòÍ∏∞ ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
        const newWishlistItem = {
          id: `wishlist_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`,
          productId: product.id,
          name: product.name,
          price: product.price,
          image: product.image,
          addedAt: new Date().toISOString(),
          // ÏÉÅÌíàÏùò Í∏∞Î≥∏ Ï†ïÎ≥¥Îßå Ï†ÄÏû•
          brand: product.brand || '',
          category: product.category || {},
          status: product.status || 'active'
        };
        
        const updatedItems = [...items, newWishlistItem];
        set({ 
          items: updatedItems,
          totalCount: updatedItems.length
        });
        
        get().saveGuestWishlist(); // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        console.log('üíñ Added to wishlist:', product.name);
        return true;
      },

      // Ï∞úÌïòÍ∏∞ Ï†úÍ±∞
      removeFromWishlist: (productId) => {
        const { items } = get();
        const updatedItems = items.filter(item => item.productId !== productId);
        
        set({ 
          items: updatedItems,
          totalCount: updatedItems.length
        });
        
        get().saveGuestWishlist(); // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        console.log('üíî Removed from wishlist:', productId);
        return true;
      },

      // Ï∞úÌïòÍ∏∞ ÌÜ†Í∏Ä (ÏûàÏúºÎ©¥ Ï†úÍ±∞, ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä)
      toggleWishlist: (product) => {
        const { items } = get();
        const existingItem = items.find(item => item.productId === product.id);
        
        if (existingItem) {
          return get().removeFromWishlist(product.id);
        } else {
          return get().addToWishlist(product);
        }
      },

      // Ï∞úÌïòÍ∏∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
      clearWishlist: () => {
        const { sessionId, sessionType } = get();
        set({
          ...initialState,
          sessionId,
          sessionType
        });
        get().saveGuestWishlist(); // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        console.log('üóëÔ∏è Wishlist cleared');
      },

      // Ïó¨Îü¨ ÏïÑÏù¥ÌÖú Ìïú Î≤àÏóê ÏÇ≠Ï†ú
      removeMultipleFromWishlist: (productIds) => {
        const { items } = get();
        const updatedItems = items.filter(item => !productIds.includes(item.productId));
        
        set({ 
          items: updatedItems,
          totalCount: updatedItems.length
        });
        
        get().saveGuestWishlist(); // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        console.log('üóëÔ∏è Removed multiple items from wishlist:', productIds.length);
        return productIds.length;
      },

      // Ï∞úÌïòÍ∏∞ ‚Üí Ïû•Î∞îÍµ¨Îãà Ïù¥Îèô
      moveToCart: (productId, quantity = 1) => {
        const { items } = get();
        const wishlistItem = items.find(item => item.productId === productId);
        
        if (!wishlistItem) {
          console.log('‚ö†Ô∏è Item not found in wishlist:', productId);
          return false;
        }
        
        // cartStoreÏôÄ Ïó∞ÎèôÌïòÏó¨ Ïû•Î∞îÍµ¨ÎãàÏóê Ï∂îÍ∞Ä
        try {
          const { useCartStore } = require('./cartStore');
          const cartStore = useCartStore.getState();
          
          // Ï∞úÌïòÍ∏∞ ÏïÑÏù¥ÌÖúÏùÑ Í∏∞Î∞òÏúºÎ°ú ÏÉÅÌíà Í∞ùÏ≤¥ Ïû¨Íµ¨ÏÑ±
          const productForCart = {
            id: wishlistItem.productId,
            name: wishlistItem.name,
            price: wishlistItem.price,
            image: wishlistItem.image,
            brand: wishlistItem.brand,
            category: wishlistItem.category,
            status: wishlistItem.status
          };
          
          cartStore.addToCart(productForCart, quantity);
          
          // Ï∞úÌïòÍ∏∞ÏóêÏÑú Ï†úÍ±∞
          get().removeFromWishlist(productId);
          
          console.log('üõí Moved to cart from wishlist:', wishlistItem.name);
          return true;
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to move to cart:', error.message);
          return false;
        }
      },

      // Ìó¨Ìçº Ìï®ÏàòÎì§
      isInWishlist: (productId) => {
        const { items } = get();
        return items.some(item => item.productId === productId);
      },

      getWishlistItem: (productId) => {
        const { items } = get();
        return items.find(item => item.productId === productId);
      },

      getWishlistCount: () => {
        return get().totalCount;
      },

      isEmpty: () => {
        return get().totalCount === 0;
      },

      // Ï∞úÌïòÍ∏∞ Ï†ïÎ†¨
      sortWishlist: (sortBy = 'addedAt', sortOrder = 'desc') => {
        const { items } = get();
        const sortedItems = [...items];
        
        sortedItems.sort((a, b) => {
          let valueA, valueB;
          
          switch (sortBy) {
            case 'name':
              valueA = a.name.toLowerCase();
              valueB = b.name.toLowerCase();
              break;
            case 'price':
              valueA = typeof a.price === 'object' ? (a.price.sale || a.price.regular) : a.price;
              valueB = typeof b.price === 'object' ? (b.price.sale || b.price.regular) : b.price;
              break;
            case 'addedAt':
              valueA = new Date(a.addedAt);
              valueB = new Date(b.addedAt);
              break;
            case 'brand':
              valueA = a.brand.toLowerCase();
              valueB = b.brand.toLowerCase();
              break;
            default:
              valueA = new Date(a.addedAt);
              valueB = new Date(b.addedAt);
          }
          
          if (sortOrder === 'asc') {
            if (valueA < valueB) return -1;
            if (valueA > valueB) return 1;
            return 0;
          } else {
            if (valueA > valueB) return -1;
            if (valueA < valueB) return 1;
            return 0;
          }
        });
        
        set({ items: sortedItems });
        get().saveGuestWishlist(); // Í≤åÏä§Ìä∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        return sortedItems;
      },

      // Ï∞úÌïòÍ∏∞ ÌïÑÌÑ∞ÎßÅ
      filterWishlist: (filters = {}) => {
        const { items } = get();
        
        return items.filter(item => {
          // Î∏åÎûúÎìú ÌïÑÌÑ∞
          if (filters.brand && item.brand !== filters.brand) {
            return false;
          }
          
          // Í∞ÄÍ≤© Î≤îÏúÑ ÌïÑÌÑ∞
          if (filters.minPrice || filters.maxPrice) {
            const price = typeof item.price === 'object' ? (item.price.sale || item.price.regular) : item.price;
            if (filters.minPrice && price < filters.minPrice) {
              return false;
            }
            if (filters.maxPrice && price > filters.maxPrice) {
              return false;
            }
          }
          
          // ÎÇ†Ïßú Î≤îÏúÑ ÌïÑÌÑ∞ (ÏµúÍ∑º NÏùº)
          if (filters.recentDays) {
            const addedDate = new Date(item.addedAt);
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - filters.recentDays);
            if (addedDate < cutoffDate) {
              return false;
            }
          }
          
          // Í≤ÄÏÉâÏñ¥ ÌïÑÌÑ∞
          if (filters.search) {
            const searchTerm = filters.search.toLowerCase();
            const searchableText = `${item.name} ${item.brand}`.toLowerCase();
            if (!searchableText.includes(searchTerm)) {
              return false;
            }
          }
          
          return true;
        });
      },

      // ÏÑ∏ÏÖò Í¥ÄÎ†® Ìó¨Ìçº Ìï®ÏàòÎì§
      getSessionInfo: () => {
        const { sessionId, sessionType } = get();
        return {
          sessionId,
          sessionType,
          isGuest: sessionType === 'guest',
          isUser: sessionType === 'user'
        };
      },

      // ÌòÑÏû¨ ÏÑ∏ÏÖòÏùò Ï∞úÌïòÍ∏∞ ÏÉÅÌÉú
      getWishlistSessionState: () => {
        const { items, totalCount, sessionId, sessionType } = get();
        return {
          sessionId,
          sessionType,
          itemCount: items.length,
          totalCount,
          isEmpty: items.length === 0,
          isGuest: sessionType === 'guest',
          recentItems: items.slice(0, 5) // ÏµúÍ∑º 5Í∞ú ÏïÑÏù¥ÌÖú
        };
      },

      // Ï∞úÌïòÍ∏∞ ÌÜµÍ≥Ñ
      getWishlistStats: () => {
        const { items } = get();
        
        if (items.length === 0) {
          return {
            totalItems: 0,
            totalValue: 0,
            brands: [],
            categories: [],
            oldestItem: null,
            newestItem: null
          };
        }
        
        const brands = [...new Set(items.map(item => item.brand).filter(Boolean))];
        const categories = [...new Set(items.map(item => item.category?.main).filter(Boolean))];
        
        const totalValue = items.reduce((sum, item) => {
          const price = typeof item.price === 'object' ? (item.price.sale || item.price.regular) : item.price;
          return sum + price;
        }, 0);
        
        const sortedByDate = [...items].sort((a, b) => new Date(a.addedAt) - new Date(b.addedAt));
        
        return {
          totalItems: items.length,
          totalValue,
          brands,
          categories,
          oldestItem: sortedByDate[0],
          newestItem: sortedByDate[sortedByDate.length - 1]
        };
      }
    }),
    {
      name: 'wishlist-storage',
      storage: createJSONStorage(),
      // persist ÌõÑ ÏΩúÎ∞±ÏúºÎ°ú totalCount Ïû¨Í≥ÑÏÇ∞
      onRehydrateStorage: () => (state) => {
        if (state && state.items) {
          state.totalCount = state.items.length;
        }
      }
    }
  )
);